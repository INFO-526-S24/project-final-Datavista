---
title: "Unveiling Trends in Data Breaches and Data Hacks"
subtitle: "INFO 526 - Project Final"
author: 
  - name: "Team member - Akash Srinivasan, Abhishek Kumar, Divya Dhole, Noureen Mithaigar, Gowtham Theeda, Lakshmi Neharika Anchula"
    affiliations:
      - name: "School of Information, University of Arizona"
description: "This project analyzes cyberattacks from 2003 to present day to uncover evolving trends. By pinpointing the most prevalent attack methods and targeted industries, we hope to empower proactive security measures and stay a step ahead of cybercriminals, ultimately creating a safer digital landscape."
format:
   html:
    code-tools: true
    code-overflow: wrap
    embed-resources: true
editor: visual
execute:
  warning: false
  echo: false
---

## Abstract

In today's digital world, data breaches are becoming frighteningly common. Understanding how these attacks work and how they've changed over time is crucial to protecting ourselves. This project is like shining a flashlight into the dark corners of data breaches. We'll be using real-world data on hacks from 2003 to 2023 to answer two key questions.

First, we want to see how data breaches have become more sophisticated (or sneakier!) in the past ten years. We'll look at how often they happen, how bad they are, and how they affect different businesses. Second, we'll pinpoint weaknesses - which industries and types of data are easiest for attackers to exploit, and what the consequences are for everyone involved.

To do this, we'll be cleaning up the data and using some clever R programming tricks. We'll use ggplot2 to create charts and graphs that make the information clear and easy to understand. Finally, we'll build interactive dashboards with Shiny, an R package. These dashboards will be like treasure maps, helping cybersecurity professionals and organizations see trends over time, find vulnerable areas, and understand the big picture of data breaches.

By uncovering these insights, we hope to empower cybersecurity professionals to build better defenses against future attacks. The ultimate goal? Keeping your data safe and sound.

## **Introduction**

Imagine a world where your personal information – from credit card details to medical records – is up for grabs on the dark web. Unfortunately, this isn't science fiction; it's the harsh reality of data breaches. These digital heists, where sensitive information is stolen or leaked, are becoming frighteningly common. Just in 2023, data breaches skyrocketed by a whopping 72% compared to the year before. It's clear: we need to understand these attacks better to fight back.

This project is like shining a flashlight into the dark corners of data breaches. We'll be using a treasure trove of real-world data on hacks and breaches from 2003 to 2023. By analyzing trends, impacts, and weaknesses, we aim to uncover how these incidents unfold across different industries and through various methods. Our ultimate mission? To empower cybersecurity professionals and organizations with the knowledge they need to build stronger defenses against future attacks.

Here's where things get interesting. We'll be asking two key questions. First, we want to see how data breaches have become more cunning (or sneakier!) in the past ten years. We'll be looking at how often they happen, how bad they are, and how they affect different businesses. Second, we'll pinpoint weaknesses – which industries and types of data are easiest for attackers to exploit, and what the consequences are for everyone involved.

To achieve this, we'll be using some clever data cleaning tricks and the power of R programming, a special tool that helps us analyze information. We'll also create clear and informative visuals using ggplot2, so you can see the trends for yourself. Finally, we'll build interactive dashboards with Shiny, an R package. Think of these dashboards as treasure maps, helping cybersecurity professionals see trends over time, find vulnerable areas, and understand the big picture of data breaches.

By uncovering these insights, we hope to empower cybersecurity professionals to build better defenses against future attacks. The ultimate goal? Keeping your data safe and sound, so you can browse the internet with peace of mind.

## **Visualizations:**

## **Question** 1) General Assessment: How have information breaches advanced over past decade(2013-2023), and what are the patterns with respect to their recurrence, seriousness, and affect over distinctive businesses?

## Approach :

## Analysis

## **Data** Preprocessing

```{r}
# Load required libraries
library(plotly)
library(janitor)
library(magrittr)  # Load magrittr for pipe operator

# Load the CSV data
data <- read.csv("data/Data_Breaches_LATEST.csv")

# Rename the column with extra spaces
names(data)[names(data) == 'year   '] <- 'year'

# Filter data for the past decade (2013-2023)
df_decade <- data[data$year >= 2013 & data$year <= 2023, ]

# Clean column names using janitor::clean_names()
df_decade <- janitor::clean_names(df_decade)

# Aggregate data by year, sector, and method
agg_data <- aggregate(records_lost ~ year + sector + method, data = df_decade, FUN = sum)

# Create a 3D plot
plot_ly(agg_data, x = ~year, y = ~sector, z = ~records_lost, color = ~method,
        type = "scatter3d", mode = "markers", sizes = 10) %>%
  layout(title = "Information Breaches Over the Past Decade",
         scene = list(xaxis = list(title = "Year"),
                      yaxis = list(title = "Sector"),
                      zaxis = list(title = "Records Lost")))

```

```{r}
library(ggplot2)
library(dplyr)
library(gridExtra)


# Assuming your DataFrame is named 'data'

# Clean 'health ' to 'health'
data$sector <- gsub("health ", "health", data$sector)

# Function to categorize sectors
categorize_sector <- function(sector) {
  if (sector %in% c("government", "government, health", "government, military")) {
    return("government")
  } else if (sector %in% c("health", "tech, health", "misc, health", "military, health")) {
    return("healthcare")
  } else if (sector %in% c("tech", "telecoms", "web", "retail", "web ", "NGO", "misc", 
                            "legal", "app", "tech, app", "academic", "tech, web", 
                            "web, tech", "tech, retail", "web, military", "military", 
                            "web, gaming")) {
    return("technology")
  } else {
    return("other")
  }
}

# Apply categorize_sector function to create a new column 'sector_group'
data$sector_group <- sapply(data$sector, categorize_sector)

# Aggregate total breaches by year
total_by_year <- data %>%
  group_by(year) %>%
  summarise(total_breaches = n())

# Aggregate total breaches by sector group
total_by_sector_group <- data %>%
  group_by(year, sector_group) %>%
  summarise(total_breaches = n())

# Plot total breaches over the years
total_plot <- ggplot(total_by_year, aes(x = year, y = total_breaches)) +
  geom_line(color = "black") +
  labs(x = "Year", y = "Total Breaches", title = "Total Breaches Over Time") +
  theme_minimal()

# Plot breaches by sector group
sector_group_plot <- ggplot(total_by_sector_group, aes(x = year, y = total_breaches, color = sector_group)) +
  geom_line() +
  labs(x = "Year", y = "Total Breaches", title = "Breaches Over Time by Sector Group") +
  theme_minimal() +
  facet_wrap(~ sector_group, scales = "free_y")

# Combine plots
grid.arrange(total_plot, sector_group_plot, ncol = 1, heights = c(2, 3))

```

```{r}

library(ggplot2)
library(dplyr)
library(gganimate)

# Assuming your DataFrame is named 'data'

# Clean 'health ' to 'health'
data$sector <- gsub("health ", "health", data$sector)

# Function to categorize sectors
categorize_sector <- function(sector) {
  if (sector %in% c("government", "government, health", "government, military")) {
    return("Government")
  } else if (sector %in% c("health", "tech, health", "misc, health", "military, health")) {
    return("Healthcare")
  } else if (sector %in% c("tech", "telecoms", "web", "retail", "web ", "NGO", "misc", 
                            "legal", "app", "tech, app", "academic", "tech, web", 
                            "web, tech", "tech, retail", "web, military", "military", 
                            "web, gaming")) {
    return("Technology")
  } else {
    return("Other")
  }
}

# Apply categorize_sector function to create a new column 'sector_group'
data$sector_group <- sapply(data$sector, categorize_sector)

# Aggregate total breaches by year
total_by_year <- data %>%
  group_by(year) %>%
  summarise(total_breaches = n())

# Aggregate total breaches by sector group
total_by_sector_group <- data %>%
  group_by(year, sector_group) %>%
  summarise(total_breaches = n())

# Plot total breaches over the years
total_plot <- ggplot(total_by_year, aes(x = year, y = total_breaches, group = 1)) +
  geom_point(color = "black", size = 3) +
  geom_line(color = "black", size = 1) +
  labs(x = "Year", y = "Total Breaches", title = "Total Breaches Over Time") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14),
    plot.title = element_text(size = 16, hjust = 0.5)
  ) +
  transition_reveal(year)

# Plot breaches by sector group
sector_group_plot <- ggplot(total_by_sector_group, aes(x = year, y = total_breaches, color = sector_group, group = sector_group)) +
  geom_point(size = 3) +
  geom_line(size = 1) +
  labs(x = "Year", y = "Total Breaches", title = "Breaches Over Time by Sector Group") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.line = element_line(color = "black"),
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14),
    plot.title = element_text(size = 16, hjust = 0.5)
  ) +
  transition_reveal(year)

# Create animations
total_animation <- animate(total_plot)
sector_group_animation <- animate(sector_group_plot)

# Combine animations
animation::saveGIF({
  print(total_animation)
  print(sector_group_animation)
}, movie.name = "combined_animation.gif", interval = 0.5)




```

```{r}

library(ggplot2)
library(dplyr)
library(gganimate)

# Assuming your DataFrame is named 'data'

# Clean 'health ' to 'health'
data$sector <- gsub("health ", "health", data$sector)

# Function to categorize sectors
categorize_sector <- function(sector) {
  if (sector %in% c("government", "government, health", "government, military")) {
    return("government")
  } else if (sector %in% c("health", "tech, health", "misc, health", "military, health")) {
    return("healthcare")
  } else if (sector %in% c("tech", "telecoms", "web", "retail", "web ", "NGO", "misc", 
                            "legal", "app", "tech, app", "academic", "tech, web", 
                            "web, tech", "tech, retail", "web, military", "military", 
                            "web, gaming")) {
    return("technology")
  } else {
    return("other")
  }
}

# Apply categorize_sector function to create a new column 'sector_group'
data$sector_group <- sapply(data$sector, categorize_sector)

# Aggregate total breaches by year
total_by_year <- data %>%
  group_by(year) %>%
  summarise(total_breaches = n())

# Aggregate total breaches by sector group
total_by_sector_group <- data %>%
  group_by(year, sector_group) %>%
  summarise(total_breaches = n())

# Plot total breaches over the years
total_plot <- ggplot(total_by_year, aes(x = year, y = total_breaches)) +
  geom_point(color = "black") +
  labs(x = "Year", y = "Total Breaches", title = "Total Breaches Over Time") +
  theme_minimal() +
  transition_reveal(year)

# Plot breaches by sector group
sector_group_plot <- ggplot(total_by_sector_group, aes(x = year, y = total_breaches, color = sector_group)) +
  geom_point() +
  labs(x = "Year", y = "Total Breaches", title = "Breaches Over Time by Sector Group") +
  theme_minimal() +
  transition_reveal(year)

# Create animations
total_animation <- animate(total_plot)
sector_group_animation <- animate(sector_group_plot)

# Combine animations
animation::saveGIF({
  print(total_animation)
  print(sector_group_animation)
}, movie.name = "combined_animation.gif", interval = 0.5)



```

# Q2) [Vulnerability Assessment:]{style="color:blue;"} Which sectors or types of data (e.g., personal, financial) are particularly susceptible to different breach methods like hacking or insider jobs, and what are the consequential impacts on both businesses and individuals?

## Approach :

:

## Analysis

```{r}
if (!require(broom)) {
    install.packages("broom", dependencies = TRUE)
}
library(broom)
library(plotly)
library(dplyr)


agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')


fig <- plot_ly(data = agg_data_sum, 
               x = ~sector, 
               y = ~records_lost,
               type = 'bar',
               name = ~method,
               hoverinfo = 'text',
               text = ~paste('Method:',
                             method, 
                             '<br>Records Lost:',
                             records_lost)) %>%
  layout(
    barmode = 'stack',
    title = 'Breach Methods by Sector/Type of Data',
    xaxis = list(title = 'Sector/Type'),
    yaxis = list(title = 'Records Lost')
  )

fig
```

```{r}
library(plotly)
library(dplyr)

agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

fig <- plot_ly(data = agg_data_sum, x = ~sector, y = ~records_lost, type = 'bar', name = ~method,
               hoverinfo = 'text', text = ~paste('Method:', method, '<br>Records Lost:', records_lost)) %>%
  layout(
    barmode = 'stack',
    title = 'Breach Methods by Sector/Type of Data',
    xaxis = list(title = 'Sector/Type'),
    yaxis = list(title = 'Records Lost'),
    margin = list(b = 150), # Adjust bottom margin to make space for the slider
    showlegend = TRUE
  ) %>%
  config(displayModeBar = TRUE)

# Add custom style for the bars to make them more attractive
fig <- fig %>% layout(
  barmode = 'stack',
  paper_bgcolor = 'rgba(245, 246, 249, 1)', # light grey background
  plot_bgcolor = 'rgba(245, 246, 249, 1)',
  yaxis = list(
    automargin = TRUE,
    tickfont = list(size = 10),
    titlefont = list(size = 15)
  ),
  xaxis = list(
    automargin = TRUE,
    tickangle = -45, # Angle the sector names for better readability
    tickfont = list(size = 10),
    titlefont = list(size = 15)
  )
)

# Add zoom slider
fig <- fig %>% layout(
  xaxis = list(
    rangeslider = list(
      visible = TRUE
    ),
    type = "category"
  )
)

# Render the plot
fig

```

```{r}
library(plotly)
library(dplyr)


# Summarise data
agg_data_sum <- agg_data %>%
  group_by(sector, method, year) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

# Create a stacked bar chart with plotly
fig <- plot_ly()

# Add traces for each year
years <- unique(agg_data_sum$year)
for (year in years) {
  year_data <- agg_data_sum[agg_data_sum$year == year,]
  fig <- fig %>% add_trace(
    data = year_data,
    x = ~sector, y = ~records_lost, type = 'bar', name = ~method,
    hoverinfo = 'text', text = ~paste('Year:', year, '<br>Method:', method, '<br>Records Lost:', records_lost),
    visible = ifelse(year == years[1], TRUE, FALSE) # Only the first year is visible initially
  )
}

# Add layout and style
fig <- fig %>% layout(
  barmode = 'stack',
  title = 'Breach Methods by Sector/Type of Data',
  xaxis = list(title = 'Sector/Type', tickangle = -45),
  yaxis = list(title = 'Records Lost'),
  updatemenus = list(
    list(
      y = 0.8,
      buttons = lapply(years, function(year) {
        list(
          method = "update",
          args = list(list(visible = lapply(agg_data_sum$year, function(y) y == year)),
                      list(title = paste("Breach Methods by Sector/Type of Data - Year", year))),
          label = as.character(year)
        )
      })
    )
  ),
  showlegend = TRUE,
  legend = list(title = list(text = 'Method'), orientation = 'h')
)

# Render the plot
fig

```

```{r}
library(plotly)
library(dplyr)

# Assuming agg_data is your data frame with the columns: year, sector, method, records_lost

# Summarise data
agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

# Create a diverging stacked bar chart with plotly
fig <- plot_ly(data = agg_data_sum, x = ~sector, y = ~records_lost, type = 'bar', name = ~method,
               hoverinfo = 'text', text = ~paste('Method:', method, '<br>Records Lost:', records_lost)) %>%
  layout(
    barmode = 'relative',
    title = 'Breach Severity by Sector/Type of Data',
    xaxis = list(title = 'Sector/Type'),
    yaxis = list(title = 'Records Lost'),
    showlegend = TRUE
  )

# Render the plot
fig
```

```{r}
library(plotly)
library(dplyr)

# Assuming agg_data is your data frame with the columns: year, sector, method, records_lost

# Summarise data
agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

# Create a stacked bar chart with 3D effect using plotly
fig <- plot_ly(data = agg_data_sum, x = ~sector, y = ~records_lost, z = ~method, type = 'bar', name = ~method,
               hoverinfo = 'text', text = ~paste('Sector:', sector, '<br>Method:', method, '<br>Records Lost:', records_lost)) %>%
  layout(
    scene = list(
      xaxis = list(title = 'Sector'),
      yaxis = list(title = 'Records Lost'),
      zaxis = list(title = 'Method'),
      camera = list(
        eye = list(x = 1.87, y = 0.88, z = -0.64)
      )
    ),
    barmode = 'stack',
    title = 'Records Lost by Sector/Method (Stacked Bar Chart with 3D Effect)',
    showlegend = TRUE
  )

# Render the plot
fig

```

```{r}
library(plotly)
library(dplyr)

# Assume agg_data is your data frame with the columns: year, method

# Summarizing data
agg_data_sum <- agg_data %>%
  group_by(year, method) %>%
  summarise(breach_count = n(), .groups = 'drop')

# Creating smoothed line plot with animated transitions using plotly
fig <- plot_ly(data = agg_data_sum, x = ~year, y = ~breach_count, color = ~method, mode = "lines", 
               line = list(smoothing = 0.6), hoverinfo = "text",
               text = ~paste("Year: ", year, "<br>Breach Method: ", method, "<br>Breach Count: ", breach_count)) %>%
  layout(title = "Breach Frequency Over Time",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Breach Count"),
         showlegend = TRUE) %>%
  animation_opts(frame = 100, redraw =  TRUE)

# Render plots
fig

```
