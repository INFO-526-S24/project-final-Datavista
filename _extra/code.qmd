```{r, GETTING THE LIBRARIES}
if (!require(pacman))
  install.packages(pacman)


pacman::p_load(tidyverse,
               dplyr,
               janitor,
               here,
               plotly,
               gganimate,
               scales,
               gifski,
               ggimage,
               ggtext,magick,
               animation)

pacman::p_load_gh("BlakeRMills/MoMAColors")
  message = FALSE

```

```{r, ggplot_setup, message=FALSE, include=FALSE}
# setting theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14, base_family = "sans"))


```

## Plots

### **Question 1: General Assessment: How have information breaches advanced over past decade(2013-2023), and what are the patterns with respect to their recurrence, seriousness, and affect over distinctive businesses?**

```{r}

# Load required libraries
library(plotly)
library(janitor)
library(magrittr)  # Load magrittr for pipe operator

# Load the CSV data
data <- read.csv("data/Data_Breaches_LATEST.csv")

# Rename the column with extra spaces
names(data)[names(data) == 'year   '] <- 'year'

# Filter data for the past decade (2013-2023)
df_decade <- data[data$year >= 2013 & data$year <= 2023, ]

# Clean column names using janitor::clean_names()
df_decade <- janitor::clean_names(df_decade)

# Aggregate data by year, sector, and method
agg_data <- aggregate(records_lost ~ year + sector + method, data = df_decade, FUN = sum)

# Create a 3D plot
plot_ly(agg_data, x = ~year, y = ~sector, z = ~records_lost, color = ~method,
        type = "scatter3d", mode = "markers", sizes = 10) %>%
  layout(title = "Information Breaches Over the Past Decade",
         scene = list(xaxis = list(title = "Year"),
                      yaxis = list(title = "Sector"),
                      zaxis = list(title = "Records Lost")))

```

```{r}
library(ggplot2)
library(dplyr)
library(gridExtra)



# Clean 'health ' to 'health'
data$sector <- gsub("health ",
                    "health",
                    data$sector)

# Function to categorize sectors
categorize_sector <- function(sector) {
  if (sector %in% c("government",
                    "government, 
                    health", 
                    "government,
                    military")) {
    return("government")
  } else if (sector %in% c("health",
                           "tech, 
                           health",
                           "misc,health",
                           "military, health")) {
    return("healthcare")
  } else if (sector %in% c("tech", 
                           "telecoms",
                           "web", 
                           "retail",
                           "web ",
                           "NGO",
                           "misc", 
                           "legal",
                           "app",
                           "tech, app",
                           "academic",
                           "tech, web", 
                            "web, tech", 
                           "tech, retail", 
                           "web, military",
                           "military", 
                            "web, gaming")) {
    return("technology")
  } else {
    return("other")
  }
}

# Apply categorize_sector function to create a new column 'sector_group'
data$sector_group <- sapply(data$sector,
                            categorize_sector)

# Aggregate total breaches by year
total_by_year <- data %>%
  group_by(year) %>%
  summarise(total_breaches = n())

# Aggregate total breaches by sector group
total_by_sector_group <- data %>%
  group_by(year, 
           sector_group) %>%
  summarise(total_breaches = n())

# Plot total breaches over the years
total_plot <- ggplot(total_by_year,
                     aes(x = year,
                         y = total_breaches)) +
  geom_line(color = "black") +
  labs(x = "Year",
       y = "Total Breaches",
       title = "Total Breaches Over Time") +
  theme_minimal()

# Plot breaches by sector group
sector_group_plot <- ggplot(total_by_sector_group,
                            aes(x = year, 
                                y = total_breaches,
                                color = sector_group)) +
  geom_line() +
  labs(x = "Year",
       y = "Total Breaches", 
       title = "Breaches Over Time by Sector Group") +
  theme_minimal() +
  facet_wrap(~ sector_group,
             scales = "free_y")

# Combine plots
grid.arrange(total_plot, 
             sector_group_plot,
             ncol = 1, 
             heights = c(2, 3))


```

### **Question 2 : Vulnerability Assessment:**

### **Which sectors or types of data (e.g., personal, financial) are particularly susceptible to different breach methods like hacking or insider jobs, and what are the consequential impacts on both businesses and individuals?**

```{r}
library(plotly)
library(dplyr)

agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

fig <- plot_ly(data = agg_data_sum,
               x = ~sector, 
               y = ~records_lost,
               type = 'bar',
               name = ~method,
               hoverinfo = 'text',
               text = ~paste('Method:',
                             method,
                             '<br>Records Lost:',
                             records_lost)) %>%
  layout(
    barmode = 'stack',
    title = 'Breach Methods by Sector/Type of Data',
    xaxis = list(title = 'Sector/Type'),
    yaxis = list(title = 'Records Lost'),
    margin = list(b = 150),
    showlegend = TRUE
  ) %>%
  config(displayModeBar = TRUE)

fig <- fig %>% layout(
  barmode = 'stack',
  paper_bgcolor = 'rgba(245, 246, 249, 1)', 
  plot_bgcolor = 'rgba(245, 246, 249, 1)',
  yaxis = list(
    automargin = TRUE,
    tickfont = list(size = 10),
    titlefont = list(size = 15)
  ),
  xaxis = list(
    automargin = TRUE,
    tickangle = -45, 
    tickfont = list(size = 10),
    titlefont = list(size = 15)
  )
)

fig <- fig %>% layout(
  xaxis = list(
    rangeslider = list(
      visible = TRUE
    ),
    type = "category"
  )
)

fig

```

```{r}
library(plotly)
library(dplyr)

agg_data_sum <- agg_data %>%
  group_by(sector, method, year) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

fig <- plot_ly()

years <- unique(agg_data_sum$year)
for (year in years) {
  year_data <- agg_data_sum[agg_data_sum$year == year,]
  fig <- fig %>% add_trace(
    data = year_data,
    x = ~sector, y = ~records_lost,
    type = 'bar', name = ~method,
    hoverinfo = 'text', 
    text = ~paste('Year:',
                  year,
                  '<br>Method:',
                  method, 
                  '<br>Records Lost:',
                  records_lost),
    visible = ifelse(year == years[1], TRUE, FALSE))
}

fig <- fig %>% layout(
  barmode = 'stack',
  title = 'Breach Methods by Sector/Type of Data',
  xaxis = list(
    title = 'Sector/Type',
    tickangle = -45,
    automargin = TRUE,
    rangeslider = list(type = "date")  
  ),
  yaxis = list(title = 'Records Lost'),
  updatemenus = list(
    list(
      y = 0.8,
      buttons = lapply(years, function(year) {
        list(
          method = "update",
          args = list(list(visible = lapply(agg_data_sum$year,
                                            function(y) y == year)),
                      list(title = paste("Breach Methods by Sector/Type of Data - Year", year))),
          label = as.character(year)
        )
      })
    )
  ),
  showlegend = TRUE,
  legend = list(
    title = list(text = 'Method'),
    orientation = 'v',
    x = 1, 
    y = 0.5
  )
)

fig


```

```{r}
library(plotly)
library(dplyr)

agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

fig <- plot_ly(data = agg_data_sum,
               x = ~sector,
               y = ~records_lost,
               type = 'bar',
               name = ~method,
               hoverinfo = 'text', 
               text = ~paste('Method:',
                             method,
                             '<br>Records Lost:',
                             format(records_lost, big.mark = ","))) %>%
  layout(
    barmode = 'relative',
    title = 'Breach Severity by Sector/Type of Data',
    xaxis = list(title = 'Sector/Type',
                 tickangle = -45,
                 automargin = TRUE), 
    yaxis = list(title = 'Records Lost'),
    showlegend = TRUE
  )

fig

```

```{r}
library(plotly)
library(dplyr)

agg_data_sum <- agg_data %>%
  group_by(sector, method) %>%
  summarise(records_lost = sum(records_lost), .groups = 'drop')

fig <- plot_ly(data = agg_data_sum,
               x = ~sector,
               y = ~records_lost,
               type = 'bar', 
               name = ~method,
               hoverinfo = 'text',
               text = ~paste('Sector:',
                             sector,
                             '<br>Method:',
                             method, 
                             '<br>Records Lost:',
                             records_lost)) %>%
  layout(
    barmode = 'stack',
    title = 'Records Lost by Sector/Method',
    xaxis = list(title = 'Sector',
                 tickangle = -45,
                 automargin = TRUE),
    yaxis = list(title = 'Records Lost'),
    showlegend = TRUE
  )

fig

```

```{r}
library(plotly)
library(dplyr)


agg_data_sum <- agg_data %>%
  group_by(year, method) %>%
  summarise(breach_count = n(), .groups = 'drop')

fig <- plot_ly(data = agg_data_sum,
               x = ~year,
               y = ~breach_count,
               color = ~method,
               mode = "lines", 
               line = list(smoothing = 0.6),
               hoverinfo = "text",
               text = ~paste("Year: ", 
                             year, 
                             "<br>Breach Method: ",
                             method,
                             "<br>Breach Count: ",
                             breach_count)) %>%
  layout(title = "Breach Frequency Over Time",
         xaxis = list(title = "Year"),
         yaxis = list(title = "Breach Count"),
         showlegend = TRUE) %>%
  animation_opts(frame = 100, redraw =  TRUE)

fig

```



```{r}
#| label: Bar_plot
#| echo: false
#| warning: false

library(ggplot2)

# Filter the data for the year 2023
data_2023 <- df_decade[df_decade$year == 2023, ]

# Aggregate records lost by sector
records_lost_by_sector <- aggregate(records_lost ~ sector, data = data_2023, FUN = sum)

# Order the aggregated data by records lost in descending order
records_lost_by_sector <- records_lost_by_sector[order(-records_lost_by_sector$records_lost), ]

# Select the top 10 sectors
top_10_sectors <- head(records_lost_by_sector, 10)

# Create a color palette with different colors for each bar
color_palette <- rainbow(length(top_10_sectors$sector))

# Reorder the factor levels of sector based on records lost
top_10_sectors$sector <- factor(top_10_sectors$sector, levels = top_10_sectors$sector[order(-top_10_sectors$records_lost)])

# Plot the top 10 sectors by records lost in 2023
p <- ggplot(data = top_10_sectors, aes(x = reorder(sector, -records_lost), y = records_lost, fill = sector)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = records_lost), vjust = -0.5, color = "black", size = 3) +  # Add text labels for records lost
  labs(title = "Top 10 Sectors by Records Lost in 2023",
       x = "Sector",
       y = "Records Lost") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(size = 10),  # Increase font size of y-axis text
        plot.title = element_text(size = 20)) +  # Increase font size of plot title
  scale_fill_manual(values = color_palette) +  # Assign colors manually
  coord_flip() +
  transition_states(states = sector, transition_length = 10, state_length = 5) +
  enter_fade() +
  exit_fade()

# Print the plot
print(p)


# Creating animations
bar_plot <- animate(p)  

#Rendering the animation
anim_save("images/bar_plot.gif", bar_plot)
```






```{r}
library(ggplot2)
library(dplyr)
library(gganimate)

# Cleaning 'health ' to 'health'
data$sector <- gsub("health ",
                    "health",
                    data$sector)

# Function to categorize sectors
categorize_sector <- function(sector) {
  if (sector %in% c("government",
                    "government, health",
                    "government, military")) {
    return("Government")
  } else if (sector %in% c("health",
                            "tech, health", 
                            "misc, health",
                            "military, health")) {
    return("Healthcare")
  } else if (sector %in% c("tech", 
                            "telecoms", 
                            "web",
                            "retail",
                            "web ",
                            "NGO",
                            "misc", 
                            "legal", 
                            "app", "tech, app",
                            "academic",
                            "tech, web", 
                            "web, tech", 
                            "tech, retail", 
                            "web, military", 
                            "military", 
                            "web, gaming")) {
    return("Technology")
  } else {
    return("Other")
  }
}

# Applying categorize_sector function to create a new column 'sector_group'
data$sector_group <- sapply(data$sector,
                            categorize_sector)

# Aggregating total breaches by year
total_by_year <- data %>%
  group_by(year) %>%
  summarise(total_breaches = n())

# Aggregating total breaches by sector group
total_by_sector_group <- data %>%
  group_by(year, 
           sector_group) %>%
  summarise(total_breaches = n())

# Plotting total breaches over the years
total_plot <- ggplot(total_by_year,
                     aes(x = year, 
                         y = total_breaches,
                         group = 1)) +   # Group by 1 for a continuous line
  geom_point(color = "black", size = 3) +  # Add points
  geom_line(color = "black", size = 1) +  # Add line
  labs(x = "Year", 
       y = "Total Breaches", 
       title = "Total Breaches Over Time") +  # Set axis and title labels
  theme_minimal() +  # Apply minimal theme
  theme(  # Customize theme
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(color = "black"),  # Set axis line color
    axis.text = element_text(size = 12),  # Set axis text size
    axis.title = element_text(size = 14),  # Set axis title size
    plot.title = element_text(size = 16, hjust = 0.5)  # Set plot title size and position
  ) +
  geom_text(aes(label = total_breaches), hjust = -0.1, vjust = -0.5, size = 3) + # Add text labels
  transition_reveal(year)  # Transition reveal animation

# Plotting breaches by sector group
sector_group_plot <- ggplot(total_by_sector_group,
                            aes(x = year, 
                                y = total_breaches,
                                color = sector_group, 
                                group = sector_group)) +  # Group by sector_group for separating lines
  geom_point(size = 3) +  
  geom_line(size = 1) +  
  labs(x = "Year",
       y = "Total Breaches",
       title = "Breaches Over Time by Sector Group") + 
  theme_minimal() +  
  theme(  # Customize theme
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),  
    axis.line = element_line(color = "black"),
    axis.text = element_text(size = 12),  
    axis.title = element_text(size = 14),  
    plot.title = element_text(size = 16, hjust = 0.5) 
  ) +
  geom_text(aes(label = total_breaches), hjust = -0.1, vjust = -0.5, size = 3) + # Add text labels
  transition_reveal(year)

sector_group_plot

```









```{r}
#| label: Ballon plot
#| echo: false
#| warning: false



# Create a plotly object
p <- ggplot(data = df_decade, aes(x = reorder(sector, records_lost), y = year, size = records_lost, color = sector, text = paste("Sector:", sector, "<br>Records Lost:", records_lost, "<br>Organisation:", organisation))) +
  geom_point() +
  scale_size_continuous(range = c(5, 25)) +
  labs(title = "Balloon Race Plot: Records Lost by Sector Over Time",
       x = "Sectors",
       y = "Year") +  # Change y-axis label to "Year"
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust font size and rotation
        axis.title.y = element_blank(),
        legend.position = "none") +
  scale_y_continuous(labels = function(x) as.integer(x)) +  # Change format of year labels
  transition_time(year) +
  enter_fade() +  # Add fade-in animation
  exit_fade()    # Add fade-out animation

# Convert ggplot object to a plotly object
p_plotly <- ggplotly(p, tooltip = "text")

# Render the animation
animate(p, duration = 10) 

#Rendering the animation
anim_save("images/ballon_plot.gif", animate(p) )

```



```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(gganimate)

# Clean 'health ' to 'health'
data$sector <- gsub("health ", "health", data$sector)

# Function to categorize methods
categorize_method <- function(method) {
  if (method %in% c("hacked", "inside job", "lost device", "poor security")) {
    return(method)
  } else {
    return("other")
  }
}

# Apply categorize_method function to create a new column 'method_group'
data$method_group <- sapply(data$method, categorize_method)

# Aggregate total breaches by method group
total_by_method_group <- data %>%
  group_by(year, method_group) %>%
  summarise(total_breaches = n(), .groups = "drop")  # Drop grouping after summarizing

# Ensure there are sufficient data points for time series visualization
total_by_method_group <- total_by_method_group %>%
  arrange(year, method_group)

# Plot breaches by method group
method_group_plot <- ggplot(total_by_method_group,
                            aes(x = year, 
                                y = total_breaches,
                                color = method_group, 
                                group = method_group)) +  # Group by method_group for separate lines
  geom_point(size = 3) +  # Add points
  geom_line(size = 1) +  # Add line
  labs(x = "Year",
       y = "Total Breaches",
       title = "Breaches Over Time by Method") +  # Set axis and title labels
  theme_minimal() +  # Apply minimal theme
  theme(  # Customize theme
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(color = "black"),  # Set axis line color
    axis.text = element_text(size = 12),  # Set axis text size
    axis.title = element_text(size = 14),  # Set axis title size
    plot.title = element_text(size = 16, hjust = 0.5)  # Set plot title size and position
  ) +
  transition_reveal(year)  # Transition reveal animation

# Animate and save the new chart
method_group_animation <- animate(method_group_plot)
anim_save("images/method_group_plot.gif", method_group_animation)

```




```{r fig.width = 10, fig.asp = 0.4}

#| label: Bar_plot_display
#| echo: false
#| warning: false
library(ggplot2)
library(gganimate)
library(scales)


# Filter the data for the year 2023
data_2023 <- df_decade[df_decade$year == 2023, ]

# Aggregate records lost by sector
records_lost_by_sector <- aggregate(records_lost ~ sector, data = data_2023, FUN = sum)

# Order the aggregated data by records lost in descending order
records_lost_by_sector <- records_lost_by_sector[order(-records_lost_by_sector$records_lost), ]

# Select the top 10 sectors
top_10_sectors <- head(records_lost_by_sector, 10)

# Create a color palette with different colors for each bar
color_palette <- rainbow(length(top_10_sectors$sector))

# Reorder the factor levels of sector based on records lost
top_10_sectors$sector <- factor(top_10_sectors$sector, levels = top_10_sectors$sector[order(-top_10_sectors$records_lost)])

# Plot the top 10 sectors by records lost in 2023
p <- ggplot(data = top_10_sectors, aes(x = reorder(sector, -records_lost), y = records_lost, fill = sector)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = scales::comma(records_lost)), vjust = -0.5, color = "black", size = 3) +  # Add text labels for records lost
  labs(title = "Top 5 Sectors by Records Lost in 2023",
       x = "Sector",
       y = "Records Lost") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(size = 10),  # Increase font size of y-axis text
        plot.title = element_text(size = 20)) +  # Increase font size of plot title
  scale_fill_manual(values = color_palette) +# Assign colors manually
  scale_y_continuous(labels = scales::comma) +
  coord_flip() +
  transition_states(states = sector, transition_length = 10, state_length = 5) +
  enter_fade() +
  exit_fade()



# Creating animations
bar_plot_animation <- animate(p)  

#Rendering the animation
anim_save("images/bar_plot_n.gif", bar_plot_animation)



```


```{r}
#| label: Bar_plot_display
#| echo: false
#| warning: false
library(ggplot2)
library(gganimate)
library(scales)


# Filter the data for the year 2023
data_2023 <- df_decade[df_decade$year == 2023, ]

# Aggregate records lost by sector
records_lost_by_sector <- aggregate(records_lost ~ sector, data = data_2023, FUN = sum)

# Order the aggregated data by records lost in descending order
records_lost_by_sector <- records_lost_by_sector[order(-records_lost_by_sector$records_lost), ]

# Select the top 10 sectors
top_10_sectors <- head(records_lost_by_sector, 10)

# Create a color palette with different colors for each bar
color_palette <- rainbow(length(top_10_sectors$sector))

# Reorder the factor levels of sector based on records lost
top_10_sectors$sector <- factor(top_10_sectors$sector, levels = top_10_sectors$sector[order(-top_10_sectors$records_lost)])

# Plot the top 10 sectors by records lost in 2023
p <- ggplot(data = top_10_sectors, aes(x = reorder(sector, -records_lost), y = records_lost, fill = sector)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = scales::comma(records_lost)), vjust = -0.5, color = "black", size = 3) +  # Add text labels for records lost
  labs(title = "Top 5 Sectors by Records Lost in 2023",
       x = "Sector",
       y = "Records Lost") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text.y = element_text(size = 10),  # Increase font size of y-axis text
        plot.title = element_text(size = 20)) +  # Increase font size of plot title
  scale_fill_manual(values = color_palette) +# Assign colors manually
  scale_y_continuous(labels = scales::comma) +
  coord_flip() +
  transition_states(states = sector, transition_length = 10, state_length = 5) +
  enter_fade() +
  exit_fade()



# Creating animations
bar_plot_animation <- animate(p)  

#Rendering the animation
anim_save("images/bar_plot_n.gif", bar_plot_animation)
```











